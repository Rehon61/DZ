# import json
#
# class Ingredient:
#     def __init__(self, name, price):
#         self.name = name
#         self.price = price
#
# class HotDog:
#     def __init__(self, base_price=3.0):
#         self.base_price = base_price
#         self.ingredients = []
#
#     def add_ingredient(self, ingredient):
#         self.ingredients.append(ingredient)
#
#     def calculate_price(self):
#         return self.base_price + sum(ingredient.price for ingredient in self.ingredients)
#
#     def __str__(self):
#         ingredients_str = ", ".join(ingredient.name for ingredient in self.ingredients) if self.ingredients else "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫"
#         return f"–•–æ—Ç-–¥–æ–≥: {ingredients_str}, –¶–µ–Ω–∞: üí≤{self.calculate_price():.2f}"
#
# def print_colored(text, color):
#     colors = {
#         "black": "\u001b[30m",
#         "red": "\u001b[31m",
#         "green": "\u001b[32m",
#         "yellow": "\u001b[33m",
#         "blue": "\u001b[34m",
#         "magenta": "\u001b[35m",
#         "cyan": "\u001b[36m",
#         "white": "\u001b[37m",
#         "reset": "\u001b[0m"
#     }
#     color_code = colors.get(color.lower(), colors["reset"])
#     return f"{color_code}{text}{colors['reset']}"
#
# class Order:
#     def __init__(self, payment_method):
#         self.hotdogs = []
#         self.payment_method = payment_method
#
#     def add_hotdog(self, hotdog):
#         self.hotdogs.append(hotdog)
#
#     def calculate_total(self):
#         total = sum(hotdog.calculate_price() for hotdog in self.hotdogs)
#         discount = 0.1 if len(self.hotdogs) >= 3 else 0
#         if discount > 0:
#             discount_message = print_colored("üéâ–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç —Ç—Ä–µ—Ö —Ö–æ—Ç-–¥–æ–≥–æ–≤!üéâ", "green")
#             print(discount_message)
#         return total * (1 - discount)
#
#     def __str__(self):
#         hotdogs_str = "\n".join(str(hotdog) for hotdog in self.hotdogs)
#         return f"–ó–∞–∫–∞–∑:\n{hotdogs_str}\n–ò—Ç–æ–≥–æ: üí≤{self.calculate_total():.2f}, –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {self.payment_method}\n‚ù§Ô∏è–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!‚ù§Ô∏è\n\n"
#
# class Kiosk:
#     def __init__(self):
#         self.orders = []
#         self.ingredients = {
#             '–ú–∞–π–æ–Ω–µ–∑': Ingredient('–ú–∞–π–æ–Ω–µ–∑', 0.2),
#             '–ì–æ—Ä—á–∏—Ü–∞': Ingredient('–ì–æ—Ä—á–∏—Ü–∞', 0.1),
#             '–ö–µ—Ç—á—É–ø': Ingredient('–ö–µ—Ç—á—É–ø', 0.1),
#
#         }
#         self.stock = {
#             '–ú–∞–π–æ–Ω–µ–∑': 20,
#             '–ì–æ—Ä—á–∏—Ü–∞': 20,
#             '–ö–µ—Ç—á—É–ø': 20,
#
#         }
#
#     def check_ingredients(self):
#         print("–°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏:")
#         for name, ingredient in self.ingredients.items():
#             quantity = self.check_stock(name)
#             price = ingredient.price
#             print(f"{name}: {quantity} —à—Ç, –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: üí≤{price:.2f}")
#
#     def create_order(self, payment_method):
#         return Order(payment_method)
#
#     def save_order(self, order):
#         self.orders.append(order)
#         with open('orders.json', 'a') as f:
#             json.dump(order, f, default=lambda o: o.__dict__, indent=4)
#             f.write('\n')
#
#     def get_statistics(self):
#         total_hotdogs = sum(len(order.hotdogs) for order in self.orders)
#         total_revenue = sum(order.calculate_total() for order in self.orders)
#         total_profit = total_revenue * 0.2
#         return {
#             "total_hotdogs": total_hotdogs,
#             "total_revenue": total_revenue,
#             "total_profit": total_profit,
#         }
#
#     def check_stock(self, ingredient_name):
#         return self.stock.get(ingredient_name, 0)
#
#
# def main():
#     kiosk = Kiosk()
#     while True:
#         print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∏–æ—Å–∫ —Ö–æ—Ç-–¥–æ–≥–æ–≤!")
#         print("1. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
#         print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
#         print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
#         print("4. –í—ã—Ö–æ–¥")
#         user_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")
#         if user_choice == '1':
#             payment_method = input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ")
#             order = kiosk.create_order(payment_method)
#             while True:
#                 hotdog = HotDog()
#                 print("–î–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Ö–æ—Ç-–¥–æ–≥:")
#                 for name in kiosk.ingredients:
#                     print(f"–î–æ–±–∞–≤–∏—Ç—å {name}? (–¥–∞/–Ω–µ—Ç)")
#                     choice = input()
#                     if choice.lower() == '–¥–∞':
#                         hotdog.add_ingredient(kiosk.ingredients[name])
#                 order.add_hotdog(hotdog)
#                 another = input("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ö–æ—Ç-–¥–æ–≥? (–¥–∞/–Ω–µ—Ç)")
#                 if another.lower() != '–¥–∞':
#                     break
#             kiosk.save_order(order)
#             print("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n")
#             print(order)
#         elif user_choice == '2':
#             stats = kiosk.get_statistics()
#             print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ö–æ—Ç-–¥–æ–≥–æ–≤: {stats['total_hotdogs']}")
#             print(f"–í—ã—Ä—É—á–∫–∞: üí≤{stats['total_revenue']:.2f}")
#             print(f"–ü—Ä–∏–±—ã–ª—å: üí≤{stats['total_profit']:.2f}")
#         elif user_choice == '3':
#             kiosk.check_ingredients()
#         elif user_choice == '4':
#             print("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç –≤ –Ω–∞—à –∫–∏–æ—Å–∫ ^_^. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! <3")
#             break
#         else:
#             print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# if __name__ == "__main__":
#     main()
